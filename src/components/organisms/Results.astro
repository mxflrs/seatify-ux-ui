---
import type { UxuiResultsSection } from '../../core/interfaces/landing-page.interface';
import { insertBreakAfter } from '../../core/utils/insert-break';
import OutlineContainer from '../molecules/OutlineContainer.astro';

interface Props {
    data?: UxuiResultsSection;
}

const { data } = Astro.props;
if (!data) return;

function optimizeVideoUrl(url: string) {
    if (!url?.includes('cloudinary.com')) return url;
    const params = 'q_auto,f_auto,fl_progressive';
    if (url.includes('/upload/')) {
        return url.replace('/upload/', `/upload/${params}/`);
    }
    return url;
}
---

<OutlineContainer
    extraClass="md:mt-32 mt-12 md:px-20! px-8! md:py-24! py-10! md:mx-0 mx-4"
>
    <div
        class="grid md:grid-cols-2 grid-cols-1 items-center md:pb-12 pb-8 gap-6"
    >
        <div class="flex flex-col gap-6">
            <p class="font-inter font-light">{data.secondaryTitle}</p>
            <h3 class="md:pb-0 pb-16">{data.title}</h3>
        </div>
        <p
            set:html={insertBreakAfter(data?.description, 'off.', 'pt-4')}
            class="font-inter font-light"
        />
    </div>

    <div class="flex flex-col gap-8 md:gap-16">
        {
            data.caseStudies.map((c, index) => (
                <div class="flex flex-col gap-4 border-2 border-b-white bg-black lg:mx-4 -mx-4 *:text-white lg:p-20 p-8 lg:rounded-[88px] rounded-4xl">
                    <p class="font-inter font-thin">{c.subtitle}</p>
                    <h4 class="lg:pb-9 pb-4 border-b pt-4 border-white">
                        {c.title}
                    </h4>

                    <div class="py-8 px-0 grid lg:grid-cols-2 grid-cols-1 gap-8 rounded-4xl *:font-inter">
                        <div class="flex flex-col lg:p-12 p-0">
                            <p class="border-b border-b-white pb-3 mb-3 lg:text-base! text-xs!">
                                Before
                            </p>
                            <div class="grid grid-cols-2 gap-4">
                                <div class="flex flex-col">
                                    <p class="font-extralight pb-4 lg:text-base! text-xs!">
                                        Time on Page
                                    </p>
                                    <h3>{c.before.time}</h3>
                                </div>
                                {!c.title.includes('Namaste') && (
                                    <div class="flex flex-col">
                                        <p class="font-extralight pb-4 lg:text-base! text-xs!">
                                            {c.title.includes('Jeff')
                                                ? 'Booking Conversions'
                                                : 'Bounce Rate'}
                                        </p>

                                        <h3>
                                            {c.before.bounce}{' '}
                                            {c.title.includes('Jeff')
                                                ? '/month'
                                                : '%'}
                                        </h3>
                                    </div>
                                )}
                            </div>
                        </div>
                        <div class="flex flex-col bg-white *:text-black! lg:p-12 p-6 lg:rounded-4xl rounded-3xl -mx-2 lg:mx-0">
                            <p class="border-b border-b-black pb-3 mb-3 lg:text-base! text-xs!">
                                After
                            </p>
                            <div class="grid grid-cols-2 gap-4">
                                <div class="flex flex-col">
                                    <p class="font-extralight pb-4 lg:text-base! text-xs!">
                                        Time on Page
                                    </p>
                                    <h3>{c.after.time}</h3>
                                </div>
                                {!c.title.includes('Namaste') && (
                                    <div class="flex flex-col">
                                        <p class="font-extralight pb-4 lg:text-base! text-xs!">
                                            Bounce Rate
                                        </p>
                                        <h3>{c.after.bounce}%</h3>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>

                    <div class="flex lg:gap-8 gap-2 lg:py-10 py-6 -mx-4 lg:mx-0 px-8 border border-white rounded-full justify-center *:font-extralight *:font-inter *:lg:text-base! *:text-xs!">
                        <p>
                            {c.title.includes('Namaste')
                                ? 'Sales growth:'
                                : 'Time on page:'}
                            <span class="font-medium">{c.timeOnPage}</span>
                        </p>
                        {!c.title.includes('Namaste') && (
                            <p>
                                Bounce Rate:{' '}
                                <span class="font-medium">{c.bounceRate}</span>
                            </p>
                        )}
                    </div>

                    {c.videoUrl && (
                        <div class="w-full mt-8">
                            <video
                                class="w-full h-auto rounded-4xl bg-black case-study-video"
                                autoplay
                                muted
                                loop
                                playsinline
                                preload="metadata"
                                data-video-id={`results-video-${index}`}
                                style="background-color: #d4e8d4; opacity: 0; transition: opacity 0.3s;"
                            >
                                <source
                                    src={optimizeVideoUrl(c.videoUrl)}
                                    type="video/mp4"
                                />
                                <p class="absolute inset-0 flex items-center justify-center text-white bg-black bg-opacity-50">
                                    Your browser doesn't support video playback.
                                </p>
                            </video>
                        </div>
                    )}
                </div>
            ))
        }
    </div>
</OutlineContainer>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const videos = document.querySelectorAll('video.case-study-video');

        videos.forEach((video) => {
            const observer = new IntersectionObserver(
                (entries) => {
                    entries.forEach((entry) => {
                        if (entry.isIntersecting) {
                            // Force play when video comes into view
                            video.play().catch((error) => {
                                console.log('Autoplay prevented:', error);
                            });
                        } else {
                            // Pause when video goes out of view
                            if (!video.paused) {
                                video.pause();
                            }
                        }
                    });
                },
                {
                    threshold: 0.25,
                    rootMargin: '100px',
                }
            );

            observer.observe(video);

            // Handle video load events
            video.addEventListener('loadeddata', () => {
                video.style.opacity = '1';
                // Try to play immediately if video is in viewport
                const rect = video.getBoundingClientRect();
                if (rect.top < window.innerHeight && rect.bottom > 0) {
                    video.play().catch((error) => {
                        console.log('Initial autoplay prevented:', error);
                    });
                }
            });

            video.addEventListener('canplay', () => {
                video.classList.add('ready');
            });

            video.addEventListener('error', (e) => {
                console.error('Video error:', e);
                const container = video.parentElement;
                if (container) {
                    container.innerHTML = `
                        <div class="flex items-center justify-center h-full text-gray-500">
                            <p>Video unavailable</p>
                        </div>
                    `;
                }
            });
        });

        // Handle page visibility changes
        document.addEventListener('visibilitychange', () => {
            videos.forEach((video) => {
                if (document.hidden) {
                    video.pause();
                } else {
                    // Only play if video is in viewport
                    const rect = video.getBoundingClientRect();
                    if (rect.top < window.innerHeight && rect.bottom > 0) {
                        video.play().catch((error) => {
                            console.log(
                                'Visibility change autoplay prevented:',
                                error
                            );
                        });
                    }
                }
            });
        });
    });
</script>

<style>
    video.case-study-video {
        background-color: #d4e8d4;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }

    video.case-study-video.ready {
        opacity: 1;
    }
</style>
